#%RAML 1.0
title: gis-hc-integration-api
description : This API will be used on chatbot integration to integrate grunindex and Homeconnect account
baseUri: https://localhost:8081/gis-hc/v1
/findAvailablePrograms:
  description: Method is being used to retrieve available programs from Homeconnect API.
  post:
    description: Get programs via deviceId
    body:
      application/json:
        example:
          {
            "answer" : "deviceId",
            "questionId": "1", 
            "state" : "hayra"
          }
    responses:
      200:
        body:
          application/json:
            example:
              {
                "status": "200",
                "message" : "success"
              }
      500:
        body:
          application/json:
            example:
              {
                "status" : "500",
                "message" : "Internal server error"
              }
/setGrunStromEnergyForDevice:
  description: Method is being used to schedule HomeConnect device for selected program and schedule.
  post:
    body:
      application/json:
        example:
          {
            "answer" : "deviceId",
            "questionId": "5", 
            "state" : "hayra"
          }
    responses:
      200:
        body:
          application/json:
            example:
              {
                "status": "200",
                "message" : "success"
              }
      500:
        body:
          application/json:
            example:
              {
                "status" : "500",
                "message" : "Internal server error"
              }
/authenticateHomeConnect:
  description: HomeConnect API authentication mechanism is implemented, it will use HomeConnect App clientId and to make an authentication request, more details can be retrieved on HomeConnect API documentation https://api-docs.home-connect.com/
  get:
    queryParameters:
      code:
        type: string
      state:
        type: string
    responses:
      200:
        body:
          text/html:
            example: |
              <!doctype html>
              <html lang="en">
                <head>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1">
                 <!-- Bootstrap CSS -->
                <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"     integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
                <title>Greenbot</title>
                </head>
                <body>
                <nav class="navbar navbar-dark" style="background-color: #77bb3f;">
                  <div class="container-fluid">
                    <span class="navbar-brand mb-0 h1">Greenbot</span>
                  </div>
                </nav>
                <figure class="text-center">
                  <blockquote class="blockquote">
                    <p>You have authorized Greenbot to access your Home Connect Appliances!</p>
                  </blockquote>
                  <figcaption class="blockquote-footer">
                    You can close this window now and go back to chat!
                  </figcaption>
                </figure>
                <div class="d-grid gap-2 col-6 mx-auto">
                  <a href="https://t.me/greenhomeappliancebot" class="btn btn-lg btn-dark" style="background-color: #77bb3f;">Back to Chat</a>
                </div>
                <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
                </body>
              </html>

/saveProgramRequestZipCode:
  description: Saves selected program from user and requests zipcode for FlowXO Chatbot flow.
  post:
    body:
      application/json:
        example:
          {
            "answer" : "programId",
            "questionId": "3", 
            "state" : "hayra"
          }
    responses:
      200:
        body:
          application/json:
            example:
              {
                "status": "200",
                "message" : "success"
              }
      500:
        body:
          application/json:
            example:
              {
                "status" : "500",
                "message" : "Internal server error"
              }
/checkGrunStromIndexForZipCode:
  description: Check green electric for requested zipcode from user and pushes it to FlowXO chatbot flow, uses Corrently API available on https://corrently.de/api/stromdao/gsi
  post:
    body:
      application/json:
        example:
          {
            "answer" : "80686",
            "questionId": "4", 
            "state" : "hayra"
          }
    responses:
      200:
        body:
          application/json:
            example:
              {
                "status": "200",
                "message" : "success"
              }
      500:
        body:
          application/json:
            example:
              {
                "status" : "500",
                "message" : "Internal server error"
              }